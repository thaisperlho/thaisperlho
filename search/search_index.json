{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem-vindo a minha melhor vers\u00e3o \u00b6 Este \u00e9 o meu portf\u00f3lio tenho aqui alguns dos meus projetos, documentados de modo bem din\u00e2mico para mostrar o que venho aprendendo e aperfei\u00e7oando. Informa\u00e7\u00f5es pessoais \u00b6 $ curl https://localhost:8000/personal-info { \"name\": \"Thais Pereira de Carvalho\" \"age\": \"25\" \"cell\": \"(11)99989-0865\" \"email\": \"carvalho.thais0301@gmail.com\" } Objetivo \u00b6 $ curl https://localhost:8000/target { \"message\": \"Conseguir meu primeiro emprego na \u00e1rea de desenvolvimento de software.\" } Por que me contratar? \u00b6 $ curl https://localhost:8000/why-hire-me { \"message\": \"Sou uma pessoa determinada e proativa.\", \"quality\": [\"Autodidata\",\"Comunicativa\",\"Observadora\",\"Curiosa\"] }","title":"Home"},{"location":"#bem-vindo-a-minha-melhor-versao","text":"Este \u00e9 o meu portf\u00f3lio tenho aqui alguns dos meus projetos, documentados de modo bem din\u00e2mico para mostrar o que venho aprendendo e aperfei\u00e7oando.","title":"Bem-vindo a minha melhor vers\u00e3o"},{"location":"#informacoes-pessoais","text":"$ curl https://localhost:8000/personal-info { \"name\": \"Thais Pereira de Carvalho\" \"age\": \"25\" \"cell\": \"(11)99989-0865\" \"email\": \"carvalho.thais0301@gmail.com\" }","title":"Informa\u00e7\u00f5es pessoais"},{"location":"#objetivo","text":"$ curl https://localhost:8000/target { \"message\": \"Conseguir meu primeiro emprego na \u00e1rea de desenvolvimento de software.\" }","title":"Objetivo"},{"location":"#por-que-me-contratar","text":"$ curl https://localhost:8000/why-hire-me { \"message\": \"Sou uma pessoa determinada e proativa.\", \"quality\": [\"Autodidata\",\"Comunicativa\",\"Observadora\",\"Curiosa\"] }","title":"Por que me contratar?"},{"location":"api/api1/","text":"API de not\u00edcias \u00b6 Essa API fornece as not\u00edcias utilizadas no Soccer News Linguagen \u00b6 Python Documenta\u00e7\u00e3o \u00b6 Docs Redoc Documenta\u00e7\u00e3o da API Documenta\u00e7\u00e3o da API Ferramentas \u00b6 Azure Visual Studio Code FastAPI Docker Reposit\u00f3rio \u00b6 API News Soccer","title":"Rest API"},{"location":"api/api1/#api-de-noticias","text":"Essa API fornece as not\u00edcias utilizadas no Soccer News","title":"API de not\u00edcias"},{"location":"api/api1/#linguagen","text":"Python","title":"Linguagen"},{"location":"api/api1/#documentacao","text":"Docs Redoc Documenta\u00e7\u00e3o da API Documenta\u00e7\u00e3o da API","title":"Documenta\u00e7\u00e3o"},{"location":"api/api1/#ferramentas","text":"Azure Visual Studio Code FastAPI Docker","title":"Ferramentas"},{"location":"api/api1/#repositorio","text":"API News Soccer","title":"Reposit\u00f3rio"},{"location":"projetos/EncontrandoCaramelos/","text":"\u00b6 Qual objetivo? \u00b6 O objetivo do \"Encontrando Caramelos\" \u00e9 diminuir maus-tratos em animais de rua e proporcionar uma ado\u00e7\u00e3o r\u00e1pida e segura atrav\u00e9s de uma plataforma de f\u00e1cil acesso, atingindo de forma direta a qualidade de vida de todas as partes envolvidas no processo (ONGs, adotantes e pets). Buscamos sempre atrair mais pessoas a se juntarem a esse movimento que luta por uma vida mais adequada aos animais v\u00edtimas de maus tratos. Prototipa\u00e7\u00e3o \u00b6 Alta fidelidade Baixa fidelidade Rabiscoframe Figma - Alta fidelidade Miro - Baixa fidelidade Rabiscoframe Banco de dados \u00b6 Projeto de Banco de Dados Relacional \u00b6 Conceitual L\u00f3gico Modelo conceitual Modelo L\u00f3gico Script \u00b6 O banco foi criado utilizando postegres CREATE TABLE usuario ( \"id\" serial NOT NULL , email varchar ( 50 ) NOT NULL , senha varchar ( 50 ) NOT NULL , CONSTRAINT PK_usuario PRIMARY KEY ( \"id\" ) ); CREATE TABLE responsavel_ong ( \"id\" serial NOT NULL , nome varchar ( 50 ) NOT NULL , cpf int NOT NULL , CONSTRAINT PK_responsavel_ong PRIMARY KEY ( \"id\" ) ); CREATE TABLE tipo_ajuda ( \"id\" serial NOT NULL , tipo_ajuda varchar ( 50 ) NOT NULL , CONSTRAINT PK_tipo_ajuda PRIMARY KEY ( \"id\" ) ); CREATE TABLE ongs ( \"id\" serial NOT NULL , nome varchar ( 50 ) NOT NULL , fk_id_tipo_ajuda serial NOT NULL , fk_id_usuario serial NOT NULL , CNPJ int NOT NULL , telefone int NULL , site varchar ( 50 ) NULL , entrega boolean NULL , fk_id_responsavel serial NOT NULL , CONSTRAINT PK_ongs PRIMARY KEY ( \"id\" ), CONSTRAINT FK_1 FOREIGN KEY ( fk_id_usuario ) REFERENCES usuario ( \"id\" ), CONSTRAINT FK_2 FOREIGN KEY ( fk_id_responsavel ) REFERENCES responsavel_ong ( \"id\" ), CONSTRAINT FK_4 FOREIGN KEY ( fk_id_tipo_ajuda ) REFERENCES tipo_ajuda ( \"id\" ) ); CREATE INDEX FK_1 ON ongs ( fk_id_usuario ); CREATE INDEX FK_2 ON ongs ( fk_id_responsavel ); CREATE INDEX FK_3 ON ongs ( fk_id_tipo_ajuda ); CREATE TABLE Endereco_ongs ( \"id\" serial NOT NULL , CEP varchar ( 50 ) NOT NULL , fk_id_ong int NOT NULL , bairro varchar ( 50 ) NULL , logradouro varchar ( 50 ) NULL , cidade varchar ( 50 ) NULL , estado varchar ( 50 ) NULL , complemento varchar ( 50 ) NULL , numero int NULL , CONSTRAINT PK_Endereco PRIMARY KEY ( \"id\" ), CONSTRAINT FK_4 FOREIGN KEY ( fk_id_ong ) REFERENCES ongs ( \"id\" ) ); CREATE INDEX FK_4 ON Endereco_ongs ( fk_id_ong ); CREATE TABLE adotantes ( \"id\" serial NOT NULL , nome varchar ( 50 ) NULL , fk_id_usuario int NOT NULL , CPF int NOT NULL , telefone int NULL , CONSTRAINT PK_adotantes PRIMARY KEY ( \"id\" ), CONSTRAINT FK_5 FOREIGN KEY ( fk_id_usuario ) REFERENCES usuario ( \"id\" ) ); CREATE INDEX FK_5 ON adotantes ( fk_id_usuario ); CREATE TABLE redes_sociais_adotante ( \"id\" serial NOT NULL , link_perfil varchar ( 50 ) NULL , fk_id_adotante int NOT NULL , nome varchar ( 50 ) NULL , CONSTRAINT PK_redes_sociais PRIMARY KEY ( \"id\" ), CONSTRAINT FK_6 FOREIGN KEY ( fk_id_adotante ) REFERENCES adotantes ( \"id\" ) ); CREATE INDEX FK_6 ON redes_sociais_adotante ( fk_id_adotante ); CREATE TABLE redes_sociais_ong ( \"id\" serial NOT NULL , link_perfil varchar ( 50 ) NULL , fk_id_ong int NOT NULL , nome varchar ( 50 ) NULL , CONSTRAINT PK_redes_sociais_ong PRIMARY KEY ( \"id\" ), CONSTRAINT FK_7 FOREIGN KEY ( fk_id_ong ) REFERENCES ongs ( \"id\" ) ); CREATE INDEX FK_7 ON redes_sociais_ong ( fk_id_ong ); CREATE TABLE Endereco_adotantes ( \"id\" serial NOT NULL , CEP varchar ( 50 ) NOT NULL , fk_id_adotante int NOT NULL , bairro varchar ( 50 ) NULL , logradouro varchar ( 50 ) NULL , cidade varchar ( 50 ) NULL , estado varchar ( 50 ) NULL , complemento varchar ( 50 ) NULL , numero int NULL , CONSTRAINT PK_Endereco_adotante PRIMARY KEY ( \"id\" ), CONSTRAINT FK_14 FOREIGN KEY ( fk_id_adotante ) REFERENCES adotantes ( \"id\" ) ); CREATE INDEX FK_14 ON Endereco_adotantes ( fk_id_adotante ); CREATE TABLE especie_de_pets ( \"id\" serial NOT NULL , especie varchar ( 50 ) NOT NULL , CONSTRAINT PK_especie_de_pets PRIMARY KEY ( \"id\" ) ); CREATE TABLE pets ( \"id\" serial NOT NULL , nome varchar ( 50 ) NOT NULL , fk_id_especie_de_pets serial NOT NULL , fk_id_ongs serial NOT NULL , idade int NULL , raca varchar ( 50 ) NULL , cor varchar ( 50 ) NULL , vacinado boolean NULL , vermifugado boolean NULL , castrado boolean NULL , obs_historico varchar ( 100 ) NULL , CONSTRAINT PK_pets PRIMARY KEY ( \"id\" ), CONSTRAINT FK_10 FOREIGN KEY ( fk_id_ongs ) REFERENCES ongs ( \"id\" ), CONSTRAINT FK_11 FOREIGN KEY ( fk_id_especie_de_pets ) REFERENCES especie_de_pets ( \"id\" ) ); CREATE INDEX FK_10 ON pets ( fk_id_ongs ); CREATE INDEX FK_11 ON pets ( fk_id_especie_de_pets ); CREATE TABLE adocao ( \"id\" serial NOT NULL , data_solicitacao date NOT NULL , fk_id_adotantes serial NOT NULL , fk_id_pet serial NOT NULL , status_solicitacao int NULL , finalizado boolean NULL , CONSTRAINT PK_adocao PRIMARY KEY ( \"id\" ), CONSTRAINT FK_12 FOREIGN KEY ( fk_id_pet ) REFERENCES pets ( \"id\" ), CONSTRAINT FK_13 FOREIGN KEY ( fk_id_adotantes ) REFERENCES adotantes ( \"id\" ) ); CREATE INDEX FK_12 ON adocao ( fk_id_pet ); CREATE INDEX FK_13 ON adocao ( fk_id_adotantes ); Servi\u00e7os \u00b6 ElephanteSQL ElephantSQL \u00e9 um servi\u00e7o de hospedagem de banco de dados PostgreSQL. O ElephantSQL gerenciar\u00e1 tarefas administrativas do PostgreSQL, como instala\u00e7\u00e3o, atualiza\u00e7\u00f5es para a vers\u00e3o est\u00e1vel mais recente e tratamento de backup. Reposit\u00f3rio \u00b6 Banco de Dados Colaboradores \u00b6 Amanda Ribeiro Adriana Melo","title":"Encontrando Caramelos"},{"location":"projetos/EncontrandoCaramelos/#_1","text":"","title":""},{"location":"projetos/EncontrandoCaramelos/#qual-objetivo","text":"O objetivo do \"Encontrando Caramelos\" \u00e9 diminuir maus-tratos em animais de rua e proporcionar uma ado\u00e7\u00e3o r\u00e1pida e segura atrav\u00e9s de uma plataforma de f\u00e1cil acesso, atingindo de forma direta a qualidade de vida de todas as partes envolvidas no processo (ONGs, adotantes e pets). Buscamos sempre atrair mais pessoas a se juntarem a esse movimento que luta por uma vida mais adequada aos animais v\u00edtimas de maus tratos.","title":"Qual objetivo?"},{"location":"projetos/EncontrandoCaramelos/#prototipacao","text":"Alta fidelidade Baixa fidelidade Rabiscoframe Figma - Alta fidelidade Miro - Baixa fidelidade Rabiscoframe","title":"Prototipa\u00e7\u00e3o"},{"location":"projetos/EncontrandoCaramelos/#banco-de-dados","text":"","title":"Banco de dados"},{"location":"projetos/EncontrandoCaramelos/#projeto-de-banco-de-dados-relacional","text":"Conceitual L\u00f3gico Modelo conceitual Modelo L\u00f3gico","title":"Projeto de Banco de Dados Relacional"},{"location":"projetos/EncontrandoCaramelos/#script","text":"O banco foi criado utilizando postegres CREATE TABLE usuario ( \"id\" serial NOT NULL , email varchar ( 50 ) NOT NULL , senha varchar ( 50 ) NOT NULL , CONSTRAINT PK_usuario PRIMARY KEY ( \"id\" ) ); CREATE TABLE responsavel_ong ( \"id\" serial NOT NULL , nome varchar ( 50 ) NOT NULL , cpf int NOT NULL , CONSTRAINT PK_responsavel_ong PRIMARY KEY ( \"id\" ) ); CREATE TABLE tipo_ajuda ( \"id\" serial NOT NULL , tipo_ajuda varchar ( 50 ) NOT NULL , CONSTRAINT PK_tipo_ajuda PRIMARY KEY ( \"id\" ) ); CREATE TABLE ongs ( \"id\" serial NOT NULL , nome varchar ( 50 ) NOT NULL , fk_id_tipo_ajuda serial NOT NULL , fk_id_usuario serial NOT NULL , CNPJ int NOT NULL , telefone int NULL , site varchar ( 50 ) NULL , entrega boolean NULL , fk_id_responsavel serial NOT NULL , CONSTRAINT PK_ongs PRIMARY KEY ( \"id\" ), CONSTRAINT FK_1 FOREIGN KEY ( fk_id_usuario ) REFERENCES usuario ( \"id\" ), CONSTRAINT FK_2 FOREIGN KEY ( fk_id_responsavel ) REFERENCES responsavel_ong ( \"id\" ), CONSTRAINT FK_4 FOREIGN KEY ( fk_id_tipo_ajuda ) REFERENCES tipo_ajuda ( \"id\" ) ); CREATE INDEX FK_1 ON ongs ( fk_id_usuario ); CREATE INDEX FK_2 ON ongs ( fk_id_responsavel ); CREATE INDEX FK_3 ON ongs ( fk_id_tipo_ajuda ); CREATE TABLE Endereco_ongs ( \"id\" serial NOT NULL , CEP varchar ( 50 ) NOT NULL , fk_id_ong int NOT NULL , bairro varchar ( 50 ) NULL , logradouro varchar ( 50 ) NULL , cidade varchar ( 50 ) NULL , estado varchar ( 50 ) NULL , complemento varchar ( 50 ) NULL , numero int NULL , CONSTRAINT PK_Endereco PRIMARY KEY ( \"id\" ), CONSTRAINT FK_4 FOREIGN KEY ( fk_id_ong ) REFERENCES ongs ( \"id\" ) ); CREATE INDEX FK_4 ON Endereco_ongs ( fk_id_ong ); CREATE TABLE adotantes ( \"id\" serial NOT NULL , nome varchar ( 50 ) NULL , fk_id_usuario int NOT NULL , CPF int NOT NULL , telefone int NULL , CONSTRAINT PK_adotantes PRIMARY KEY ( \"id\" ), CONSTRAINT FK_5 FOREIGN KEY ( fk_id_usuario ) REFERENCES usuario ( \"id\" ) ); CREATE INDEX FK_5 ON adotantes ( fk_id_usuario ); CREATE TABLE redes_sociais_adotante ( \"id\" serial NOT NULL , link_perfil varchar ( 50 ) NULL , fk_id_adotante int NOT NULL , nome varchar ( 50 ) NULL , CONSTRAINT PK_redes_sociais PRIMARY KEY ( \"id\" ), CONSTRAINT FK_6 FOREIGN KEY ( fk_id_adotante ) REFERENCES adotantes ( \"id\" ) ); CREATE INDEX FK_6 ON redes_sociais_adotante ( fk_id_adotante ); CREATE TABLE redes_sociais_ong ( \"id\" serial NOT NULL , link_perfil varchar ( 50 ) NULL , fk_id_ong int NOT NULL , nome varchar ( 50 ) NULL , CONSTRAINT PK_redes_sociais_ong PRIMARY KEY ( \"id\" ), CONSTRAINT FK_7 FOREIGN KEY ( fk_id_ong ) REFERENCES ongs ( \"id\" ) ); CREATE INDEX FK_7 ON redes_sociais_ong ( fk_id_ong ); CREATE TABLE Endereco_adotantes ( \"id\" serial NOT NULL , CEP varchar ( 50 ) NOT NULL , fk_id_adotante int NOT NULL , bairro varchar ( 50 ) NULL , logradouro varchar ( 50 ) NULL , cidade varchar ( 50 ) NULL , estado varchar ( 50 ) NULL , complemento varchar ( 50 ) NULL , numero int NULL , CONSTRAINT PK_Endereco_adotante PRIMARY KEY ( \"id\" ), CONSTRAINT FK_14 FOREIGN KEY ( fk_id_adotante ) REFERENCES adotantes ( \"id\" ) ); CREATE INDEX FK_14 ON Endereco_adotantes ( fk_id_adotante ); CREATE TABLE especie_de_pets ( \"id\" serial NOT NULL , especie varchar ( 50 ) NOT NULL , CONSTRAINT PK_especie_de_pets PRIMARY KEY ( \"id\" ) ); CREATE TABLE pets ( \"id\" serial NOT NULL , nome varchar ( 50 ) NOT NULL , fk_id_especie_de_pets serial NOT NULL , fk_id_ongs serial NOT NULL , idade int NULL , raca varchar ( 50 ) NULL , cor varchar ( 50 ) NULL , vacinado boolean NULL , vermifugado boolean NULL , castrado boolean NULL , obs_historico varchar ( 100 ) NULL , CONSTRAINT PK_pets PRIMARY KEY ( \"id\" ), CONSTRAINT FK_10 FOREIGN KEY ( fk_id_ongs ) REFERENCES ongs ( \"id\" ), CONSTRAINT FK_11 FOREIGN KEY ( fk_id_especie_de_pets ) REFERENCES especie_de_pets ( \"id\" ) ); CREATE INDEX FK_10 ON pets ( fk_id_ongs ); CREATE INDEX FK_11 ON pets ( fk_id_especie_de_pets ); CREATE TABLE adocao ( \"id\" serial NOT NULL , data_solicitacao date NOT NULL , fk_id_adotantes serial NOT NULL , fk_id_pet serial NOT NULL , status_solicitacao int NULL , finalizado boolean NULL , CONSTRAINT PK_adocao PRIMARY KEY ( \"id\" ), CONSTRAINT FK_12 FOREIGN KEY ( fk_id_pet ) REFERENCES pets ( \"id\" ), CONSTRAINT FK_13 FOREIGN KEY ( fk_id_adotantes ) REFERENCES adotantes ( \"id\" ) ); CREATE INDEX FK_12 ON adocao ( fk_id_pet ); CREATE INDEX FK_13 ON adocao ( fk_id_adotantes );","title":"Script"},{"location":"projetos/EncontrandoCaramelos/#servicos","text":"ElephanteSQL ElephantSQL \u00e9 um servi\u00e7o de hospedagem de banco de dados PostgreSQL. O ElephantSQL gerenciar\u00e1 tarefas administrativas do PostgreSQL, como instala\u00e7\u00e3o, atualiza\u00e7\u00f5es para a vers\u00e3o est\u00e1vel mais recente e tratamento de backup.","title":"Servi\u00e7os"},{"location":"projetos/EncontrandoCaramelos/#repositorio","text":"Banco de Dados","title":"Reposit\u00f3rio"},{"location":"projetos/EncontrandoCaramelos/#colaboradores","text":"Amanda Ribeiro Adriana Melo","title":"Colaboradores"},{"location":"projetos/PesquisaDeProdutos/","text":"Programa de Pesquisa de Produtos \u00b6 Esse programa foi realizado para um trabalho freelancer, fiz o levantamento de alguns produtos e as suas respetivas informa\u00e7\u00f5es. Site de Pesquisa Objetivo \u00b6 Fazer o levantamento de dados incluindo: Categorias. Produtos. Pre\u00e7o de cada produto. Salvar em um arquivo em: csv. xlsx. Ferramentas \u00b6 Google Colab que j\u00e1 oferece o Visual Studio Code Linguagen \u00b6 Python Bibliotecas \u00b6 import requests , json from pprint import pprint from rich.table import Table from rich.console import Console import pandas as pd from time import sleep from datetime import datetime C\u00f3digo \u00b6 console = Console () uri_subsector = \"https://aplicativos.odepa.gob.cl/series-precios/results/pc-grupos?tipoMercado=\" uri_productor = \"https://aplicativos.odepa.gob.cl/series-precios/results/productos-by-pc-sm?grupo= {sub_id} \" data = { \"mercados\" : { \"1\" : { \"name\" : \"Precios a productor\" , \"url\" : \"https://aplicativos.odepa.gob.cl/series-precios/results/sub-sectores-by-tipo-mercado?tipoMercado=1\" , \"url_productor\" : \"https://aplicativos.odepa.gob.cl/series-precios/results/productos-by-sub-sector?subSector= {sub_id} &tipoMercado=1\" , \"subsector\" : None }, \"3\" : { \"name\" : \"Precios a consumidor Supermercado\" , \"url\" : uri_subsector + \"3\" , \"url_productor\" : uri_productor , \"subsector\" : None }, \"7\" : { \"name\" : \"Precios a consumidor Minoristas\" , \"url\" : uri_subsector + \"7\" , \"url_productor\" : uri_productor , \"subsector\" : None , }, } } #Para rodar todas as op\u00e7\u00f5es deixe ALL_OPTION como True #Caso seja False voc\u00ea precisar\u00e1 selecionar todas as op\u00e7\u00f5es desejadas ALL_OPTION = True #ALL_OPTION = False # Altere a data de termino PERIODO_TERMINO = '01/05/2022' # Se o m\u00eas for igual a None ele busca o historico MES = None #MES = \"Junio\" FILENAME = \"drive/MyDrive/project-chile/teste\" FILETYPE = \"csv\" #excel #Selecinando os tipos de precios def select_mercado (): console . rule ( \"IN\u00cdCIO\" ) console . rule ( \"SELECIONE OS SUBSECTORS DOS TIPOS DE PRECIOS\" ) console . rule ( \"\" ) table = Table ( title = \"Tabela - Tipo de Precios\" ) table . add_column ( \"C\u00f3d\" , justify = \"right\" , width = 8 ) table . add_column ( \"Tipo de Precios\" , width = 150 ) mercado_index = {} #table.add_row(\"0\", \"Todas op\u00e7\u00f5es abaixo\", style=\"green\") for index_mer , key_mer in enumerate ( data [ \"mercados\" ] . keys ()): mercado_index . update ({ index_mer : key_mer }) table . add_row ( str ( index_mer + 1 ), data [ \"mercados\" ][ key_mer ][ \"name\" ]) console . print ( table ) if ALL_OPTION : mer_ids = list ( data [ \"mercados\" ] . keys ()) else : mer_options = console . input ( \"Digite quais tipo de precios deseja buscar: \" ) mer_ids = [ mercado_index . get ( int ( index ) - 1 ) for index in mer_options . split ( sep = \" \" ) if index . isnumeric () and mercado_index . get ( int ( index ) - 1 )] console . rule ( \"FIM\" ) print ( \" \\n\\n \" ) return mer_ids #Selecionando os subsectors def select_subsectors (): mer_ids = select_mercado () console . rule ( \"IN\u00cdCIO\" , style = \"cyan\" ) console . rule ( \"SELECIONE OS SUBSECTORS DOS TIPOS DE PRECIOS\" , style = \"cyan\" ) console . rule ( \"\" , style = \"cyan\" ) for mer_id in mer_ids : uri_mercado = data [ \"mercados\" ][ mer_id ][ \"url\" ] resp_sub = requests . api . get ( uri_mercado ) . json () table = Table ( title = f \" { data [ 'mercados' ][ mer_id ][ 'name' ] } - Subsectors\" ) table . add_column ( \"C\u00f3d\" , justify = \"right\" , width = 8 ) table . add_column ( \"Nome Subsector\" , width = 150 ) #table.add_row(\"0\", \"Todas op\u00e7\u00f5es abaixo\", style=\"cyan\") for index_sub in range ( 1 , len ( resp_sub ) + 1 ): if \"glosa\" in resp_sub [ index_sub - 1 ]: name_sub = resp_sub [ index_sub - 1 ][ \"glosa\" ] else : name_sub = resp_sub [ index_sub - 1 ][ \"sseDes\" ] table . add_row ( str ( index_sub ), name_sub ) console . print ( table ) if ALL_OPTION : sub_options = list ( range ( 1 , len ( resp_sub ) + 1 )) else : sub_options = console . input ( \"Digite quais tipos de subsectors deseja buscar: \" ) sub_options = [ int ( s ) for s in sub_options . split ( sep = \" \" ) if s . isnumeric ()] subsector = {} for sub_option in sub_options : sub_data = resp_sub [ sub_option - 1 ] if \"sseCod\" in sub_data : values_sub = { sub_data [ \"sseCod\" ] : { \"name\" : sub_data [ \"sseDes\" ]}} else : values_sub = { sub_data [ \"id\" ] : { \"name\" : sub_data [ \"glosa\" ]}} subsector . update ( values_sub ) data [ \"mercados\" ][ mer_id ][ \"subsector\" ] = subsector console . rule ( \"FIM\" , style = \"cyan\" ) print ( \" \\n\\n \" ) return mer_ids #Selecionando os productors def select_productors (): mer_ids = select_subsectors () console . rule ( \"IN\u00cdCIO\" , style = \"yellow\" ) console . rule ( \"SELECIONE OS PRODUCTORS DOS SUBSECTORS\" , style = \"yellow\" ) console . rule ( \"\" , style = \"yellow\" ) for mer_id in mer_ids : sub_ids = data [ \"mercados\" ][ mer_id ][ \"subsector\" ] for sub_id in sub_ids : uri = data [ \"mercados\" ][ mer_id ][ \"url_productor\" ] uri = uri . format ( sub_id = sub_id ) resp_prod = requests . api . get ( uri ) . json () table = Table ( title = f \" { sub_ids [ sub_id ][ 'name' ] } - Productors\" ) table . add_column ( \"C\u00f3d\" , justify = \"right\" , width = 8 ) table . add_column ( \"Nome Productor\" , width = 150 ) #table.add_row(\"0\", \"Todas op\u00e7\u00f5es abaixo\", style=\"yellow\") for index_prod in range ( 1 , len ( resp_prod ) + 1 ): if \"glosaFull\" in resp_prod [ index_prod - 1 ]: name_prod = resp_prod [ index_prod - 1 ][ \"glosaFull\" ] else : name_prod = resp_prod [ index_prod - 1 ][ \"producto\" ] table . add_row ( str ( index_prod ), name_prod ) console . print ( table ) if ALL_OPTION : prod_options = list ( range ( 1 , len ( resp_prod ) + 1 )) else : prod_options = console . input ( \"Digite quais productors deseja buscar: \" ) prod_options = [ int ( p ) for p in prod_options . split ( sep = \" \" ) if p . isnumeric ()] productors = {} for prod_option in prod_options : prod_data = resp_prod [ prod_option - 1 ] if \"glosaFull\" in prod_data : values_prod = { prod_data [ \"id\" ] : prod_data [ \"glosaFull\" ]} else : values_prod = { prod_data [ \"id\" ] : prod_data [ \"producto\" ]} productors . update ( values_prod ) data [ \"mercados\" ][ mer_id ][ \"subsector\" ][ sub_id ][ \"productors\" ] = productors console . rule ( \"FIM\" , style = \"yellow\" ) print ( \" \\n\\n \" ) return mer_ids #Pegando os prices def get_prices ( uri_prices , mer_id , sub_id , prod_id ): console . rule ( f \"Buscando dados do mer_id: { mer_id } , sub_id: { sub_id } , prod_id: { prod_id } \" , style = \"magenta\" ) json_data = { 'periodoInicio' : '01/01/2018' , 'periodoTermino' : PERIODO_TERMINO , 'tipoConsulta' : 'nominal' , 'idIPC' : 6372 , 'tipoMercado' : int ( mer_id ), 'precioConIva' : False , 'subSector' : sub_id , 'producto' : prod_id , } for i in range ( 5 ): response = requests . post ( uri_prices , json = json_data , ) #headers=headers, cookies=cookies) console . rule ( f \"status_code: { response . status_code } - Sucesso: { response . ok } \" , style = \"magenta\" ) if response . ok : return response . json () console . print ( f \"Aguardado 5 segundos para tentar novamente. Tentativa: { i + 1 } de 5!\" ) console . print ( response . text ) sleep ( 5 ) if i == 4 : console . print ( \"N\u0101o foi poss\u00edvel pegar os dados para os ids abaixo.\" ) console . rule ( f \"mer_id: { mer_id } , sub_id: { sub_id } , prod_id: { prod_id } \" , style = \"red\" ) def get_options (): console . rule ( \"\" ) console . rule ( \"INICIANDO PROCESSO DE BUSCA DE DADOS\" ) console . rule ( \"\" ) print ( \" \\n \" ) uri_prices = 'https://aplicativos.odepa.gob.cl/series-precios/results/avance-por-productos' results = [] mer_ids = select_productors () for mer_id in mer_ids : sub_ids = data [ \"mercados\" ][ mer_id ][ \"subsector\" ] for sub_id in sub_ids : productors = data [ \"mercados\" ][ mer_id ][ \"subsector\" ][ sub_id ][ \"productors\" ] for prod_id in productors : resp = get_prices ( uri_prices = uri_prices , mer_id = mer_id , sub_id = sub_id , prod_id = prod_id ) values = { \"mer_id\" : mer_id , \"sub_id\" : sub_id , \"prod_id\" : prod_id , \"values\" : resp } results . append ( values ) print ( \" \\n \" ) return results def normalize_data ( results ): console . rule ( \"\" , style = \"yellow\" ) console . rule ( \"ININICIANDO NORMALIZA\u00c7\u00c3O DOS DADOS\" , style = \"yellow\" ) console . rule ( \"\" , style = \"yellow\" ) data_precios = [] for i in range ( len ( results )): mer_id = results [ i ][ \"mer_id\" ] sub_id = results [ i ][ \"sub_id\" ] prod_id = results [ i ][ \"prod_id\" ] mer_name = data [ \"mercados\" ][ mer_id ][ \"name\" ] sub_name = data [ \"mercados\" ][ mer_id ][ \"subsector\" ][ sub_id ][ \"name\" ] prod_name = data [ \"mercados\" ][ mer_id ][ \"subsector\" ][ sub_id ][ \"productors\" ][ prod_id ] for index in range ( len ( results [ i ][ \"values\" ][ \"resultAvanceProducto\" ])): results [ i ][ \"values\" ][ \"resultAvanceProducto\" ][ index ] . update ( { \"tipo_de_precios\" : mer_name , \"subsector\" : sub_name , \"producto\" : prod_name } ) data_precios . append ( results [ i ][ \"values\" ][ \"resultAvanceProducto\" ][ index ]) console . rule ( \"\" , style = \"yellow\" ) console . rule ( \"FINALIZANDO NORMALIZA\u00c7\u00c3O DOS DADOS\" , style = \"yellow\" ) console . rule ( \"\" , style = \"yellow\" ) return data_precios def create_dataframe ( data_precios : list ): console . rule ( \"\" , style = \"cyan\" ) console . rule ( \"INICIANDO CRIA\u00c7\u00c3O DO DATAFRAME\" , style = \"cyan\" ) console . rule ( \"\" , style = \"cyan\" ) df = pd . DataFrame ( data_precios ) df . rename ( columns = { 'glosa' : 'Mes' , 'ano1' : '2018' , 'ano2' : '2019' , 'ano3' : '2020' , 'ano4' : '2021' , 'ano5' : '2022' , 'var1' : 'Var. % 2022-2021' , 'var2' : 'Var. % 2022' }, inplace = True ) if MES : df = df [ df [ \"Mes\" ] == MES ] console . rule ( \"\" , style = \"cyan\" ) console . rule ( \"FINALIZANDO CRIA\u00c7\u00c3O DO DATAFRAME\" , style = \"cyan\" ) console . rule ( \"\" , style = \"cyan\" ) return df def create_file ( df : pd . DataFrame , filename : str , type_file : str ): if type_file == \"excel\" : df . to_excel ( f \" { filename } .xlsx\" ) else : df . to_csv ( f \" { filename } .csv\" ) console . rule ( \"\" , style = \"magenta\" ) console . rule ( \"FINALIZANDO CRIA\u00c7\u00c3O DO ARQUIVO\" , style = \"magenta\" ) console . rule ( \"\" , style = \"magenta\" ) def main (): results = get_options () data_precios = normalize_data ( results = results ) dataframe = create_dataframe ( data_precios = data_precios ) console . rule ( \"\" , style = \"magenta\" ) console . rule ( \"INICIANDO CRIA\u00c7\u00c3O DO ARQUIVO\" , style = \"magenta\" ) console . rule ( \"\" , style = \"magenta\" ) type_file = FILETYPE filename = FILENAME create_file ( df = dataframe , filename = filename , type_file = type_file ) console . rule ( \"\" ) console . rule ( \"FINALIZANDO PROCESSO DE BUSCA DE DADOS\" ) console . rule ( \"\" ) return dataframe dataframe = main () Resultado \u00b6 Print do arquivo teste Reposit\u00f3rio \u00b6 Pesquisa de Produtos","title":"Pesquisa de Produtos"},{"location":"projetos/PesquisaDeProdutos/#programa-de-pesquisa-de-produtos","text":"Esse programa foi realizado para um trabalho freelancer, fiz o levantamento de alguns produtos e as suas respetivas informa\u00e7\u00f5es. Site de Pesquisa","title":"Programa de Pesquisa de Produtos"},{"location":"projetos/PesquisaDeProdutos/#objetivo","text":"Fazer o levantamento de dados incluindo: Categorias. Produtos. Pre\u00e7o de cada produto. Salvar em um arquivo em: csv. xlsx.","title":"Objetivo"},{"location":"projetos/PesquisaDeProdutos/#ferramentas","text":"Google Colab que j\u00e1 oferece o Visual Studio Code","title":"Ferramentas"},{"location":"projetos/PesquisaDeProdutos/#linguagen","text":"Python","title":"Linguagen"},{"location":"projetos/PesquisaDeProdutos/#bibliotecas","text":"import requests , json from pprint import pprint from rich.table import Table from rich.console import Console import pandas as pd from time import sleep from datetime import datetime","title":"Bibliotecas"},{"location":"projetos/PesquisaDeProdutos/#codigo","text":"console = Console () uri_subsector = \"https://aplicativos.odepa.gob.cl/series-precios/results/pc-grupos?tipoMercado=\" uri_productor = \"https://aplicativos.odepa.gob.cl/series-precios/results/productos-by-pc-sm?grupo= {sub_id} \" data = { \"mercados\" : { \"1\" : { \"name\" : \"Precios a productor\" , \"url\" : \"https://aplicativos.odepa.gob.cl/series-precios/results/sub-sectores-by-tipo-mercado?tipoMercado=1\" , \"url_productor\" : \"https://aplicativos.odepa.gob.cl/series-precios/results/productos-by-sub-sector?subSector= {sub_id} &tipoMercado=1\" , \"subsector\" : None }, \"3\" : { \"name\" : \"Precios a consumidor Supermercado\" , \"url\" : uri_subsector + \"3\" , \"url_productor\" : uri_productor , \"subsector\" : None }, \"7\" : { \"name\" : \"Precios a consumidor Minoristas\" , \"url\" : uri_subsector + \"7\" , \"url_productor\" : uri_productor , \"subsector\" : None , }, } } #Para rodar todas as op\u00e7\u00f5es deixe ALL_OPTION como True #Caso seja False voc\u00ea precisar\u00e1 selecionar todas as op\u00e7\u00f5es desejadas ALL_OPTION = True #ALL_OPTION = False # Altere a data de termino PERIODO_TERMINO = '01/05/2022' # Se o m\u00eas for igual a None ele busca o historico MES = None #MES = \"Junio\" FILENAME = \"drive/MyDrive/project-chile/teste\" FILETYPE = \"csv\" #excel #Selecinando os tipos de precios def select_mercado (): console . rule ( \"IN\u00cdCIO\" ) console . rule ( \"SELECIONE OS SUBSECTORS DOS TIPOS DE PRECIOS\" ) console . rule ( \"\" ) table = Table ( title = \"Tabela - Tipo de Precios\" ) table . add_column ( \"C\u00f3d\" , justify = \"right\" , width = 8 ) table . add_column ( \"Tipo de Precios\" , width = 150 ) mercado_index = {} #table.add_row(\"0\", \"Todas op\u00e7\u00f5es abaixo\", style=\"green\") for index_mer , key_mer in enumerate ( data [ \"mercados\" ] . keys ()): mercado_index . update ({ index_mer : key_mer }) table . add_row ( str ( index_mer + 1 ), data [ \"mercados\" ][ key_mer ][ \"name\" ]) console . print ( table ) if ALL_OPTION : mer_ids = list ( data [ \"mercados\" ] . keys ()) else : mer_options = console . input ( \"Digite quais tipo de precios deseja buscar: \" ) mer_ids = [ mercado_index . get ( int ( index ) - 1 ) for index in mer_options . split ( sep = \" \" ) if index . isnumeric () and mercado_index . get ( int ( index ) - 1 )] console . rule ( \"FIM\" ) print ( \" \\n\\n \" ) return mer_ids #Selecionando os subsectors def select_subsectors (): mer_ids = select_mercado () console . rule ( \"IN\u00cdCIO\" , style = \"cyan\" ) console . rule ( \"SELECIONE OS SUBSECTORS DOS TIPOS DE PRECIOS\" , style = \"cyan\" ) console . rule ( \"\" , style = \"cyan\" ) for mer_id in mer_ids : uri_mercado = data [ \"mercados\" ][ mer_id ][ \"url\" ] resp_sub = requests . api . get ( uri_mercado ) . json () table = Table ( title = f \" { data [ 'mercados' ][ mer_id ][ 'name' ] } - Subsectors\" ) table . add_column ( \"C\u00f3d\" , justify = \"right\" , width = 8 ) table . add_column ( \"Nome Subsector\" , width = 150 ) #table.add_row(\"0\", \"Todas op\u00e7\u00f5es abaixo\", style=\"cyan\") for index_sub in range ( 1 , len ( resp_sub ) + 1 ): if \"glosa\" in resp_sub [ index_sub - 1 ]: name_sub = resp_sub [ index_sub - 1 ][ \"glosa\" ] else : name_sub = resp_sub [ index_sub - 1 ][ \"sseDes\" ] table . add_row ( str ( index_sub ), name_sub ) console . print ( table ) if ALL_OPTION : sub_options = list ( range ( 1 , len ( resp_sub ) + 1 )) else : sub_options = console . input ( \"Digite quais tipos de subsectors deseja buscar: \" ) sub_options = [ int ( s ) for s in sub_options . split ( sep = \" \" ) if s . isnumeric ()] subsector = {} for sub_option in sub_options : sub_data = resp_sub [ sub_option - 1 ] if \"sseCod\" in sub_data : values_sub = { sub_data [ \"sseCod\" ] : { \"name\" : sub_data [ \"sseDes\" ]}} else : values_sub = { sub_data [ \"id\" ] : { \"name\" : sub_data [ \"glosa\" ]}} subsector . update ( values_sub ) data [ \"mercados\" ][ mer_id ][ \"subsector\" ] = subsector console . rule ( \"FIM\" , style = \"cyan\" ) print ( \" \\n\\n \" ) return mer_ids #Selecionando os productors def select_productors (): mer_ids = select_subsectors () console . rule ( \"IN\u00cdCIO\" , style = \"yellow\" ) console . rule ( \"SELECIONE OS PRODUCTORS DOS SUBSECTORS\" , style = \"yellow\" ) console . rule ( \"\" , style = \"yellow\" ) for mer_id in mer_ids : sub_ids = data [ \"mercados\" ][ mer_id ][ \"subsector\" ] for sub_id in sub_ids : uri = data [ \"mercados\" ][ mer_id ][ \"url_productor\" ] uri = uri . format ( sub_id = sub_id ) resp_prod = requests . api . get ( uri ) . json () table = Table ( title = f \" { sub_ids [ sub_id ][ 'name' ] } - Productors\" ) table . add_column ( \"C\u00f3d\" , justify = \"right\" , width = 8 ) table . add_column ( \"Nome Productor\" , width = 150 ) #table.add_row(\"0\", \"Todas op\u00e7\u00f5es abaixo\", style=\"yellow\") for index_prod in range ( 1 , len ( resp_prod ) + 1 ): if \"glosaFull\" in resp_prod [ index_prod - 1 ]: name_prod = resp_prod [ index_prod - 1 ][ \"glosaFull\" ] else : name_prod = resp_prod [ index_prod - 1 ][ \"producto\" ] table . add_row ( str ( index_prod ), name_prod ) console . print ( table ) if ALL_OPTION : prod_options = list ( range ( 1 , len ( resp_prod ) + 1 )) else : prod_options = console . input ( \"Digite quais productors deseja buscar: \" ) prod_options = [ int ( p ) for p in prod_options . split ( sep = \" \" ) if p . isnumeric ()] productors = {} for prod_option in prod_options : prod_data = resp_prod [ prod_option - 1 ] if \"glosaFull\" in prod_data : values_prod = { prod_data [ \"id\" ] : prod_data [ \"glosaFull\" ]} else : values_prod = { prod_data [ \"id\" ] : prod_data [ \"producto\" ]} productors . update ( values_prod ) data [ \"mercados\" ][ mer_id ][ \"subsector\" ][ sub_id ][ \"productors\" ] = productors console . rule ( \"FIM\" , style = \"yellow\" ) print ( \" \\n\\n \" ) return mer_ids #Pegando os prices def get_prices ( uri_prices , mer_id , sub_id , prod_id ): console . rule ( f \"Buscando dados do mer_id: { mer_id } , sub_id: { sub_id } , prod_id: { prod_id } \" , style = \"magenta\" ) json_data = { 'periodoInicio' : '01/01/2018' , 'periodoTermino' : PERIODO_TERMINO , 'tipoConsulta' : 'nominal' , 'idIPC' : 6372 , 'tipoMercado' : int ( mer_id ), 'precioConIva' : False , 'subSector' : sub_id , 'producto' : prod_id , } for i in range ( 5 ): response = requests . post ( uri_prices , json = json_data , ) #headers=headers, cookies=cookies) console . rule ( f \"status_code: { response . status_code } - Sucesso: { response . ok } \" , style = \"magenta\" ) if response . ok : return response . json () console . print ( f \"Aguardado 5 segundos para tentar novamente. Tentativa: { i + 1 } de 5!\" ) console . print ( response . text ) sleep ( 5 ) if i == 4 : console . print ( \"N\u0101o foi poss\u00edvel pegar os dados para os ids abaixo.\" ) console . rule ( f \"mer_id: { mer_id } , sub_id: { sub_id } , prod_id: { prod_id } \" , style = \"red\" ) def get_options (): console . rule ( \"\" ) console . rule ( \"INICIANDO PROCESSO DE BUSCA DE DADOS\" ) console . rule ( \"\" ) print ( \" \\n \" ) uri_prices = 'https://aplicativos.odepa.gob.cl/series-precios/results/avance-por-productos' results = [] mer_ids = select_productors () for mer_id in mer_ids : sub_ids = data [ \"mercados\" ][ mer_id ][ \"subsector\" ] for sub_id in sub_ids : productors = data [ \"mercados\" ][ mer_id ][ \"subsector\" ][ sub_id ][ \"productors\" ] for prod_id in productors : resp = get_prices ( uri_prices = uri_prices , mer_id = mer_id , sub_id = sub_id , prod_id = prod_id ) values = { \"mer_id\" : mer_id , \"sub_id\" : sub_id , \"prod_id\" : prod_id , \"values\" : resp } results . append ( values ) print ( \" \\n \" ) return results def normalize_data ( results ): console . rule ( \"\" , style = \"yellow\" ) console . rule ( \"ININICIANDO NORMALIZA\u00c7\u00c3O DOS DADOS\" , style = \"yellow\" ) console . rule ( \"\" , style = \"yellow\" ) data_precios = [] for i in range ( len ( results )): mer_id = results [ i ][ \"mer_id\" ] sub_id = results [ i ][ \"sub_id\" ] prod_id = results [ i ][ \"prod_id\" ] mer_name = data [ \"mercados\" ][ mer_id ][ \"name\" ] sub_name = data [ \"mercados\" ][ mer_id ][ \"subsector\" ][ sub_id ][ \"name\" ] prod_name = data [ \"mercados\" ][ mer_id ][ \"subsector\" ][ sub_id ][ \"productors\" ][ prod_id ] for index in range ( len ( results [ i ][ \"values\" ][ \"resultAvanceProducto\" ])): results [ i ][ \"values\" ][ \"resultAvanceProducto\" ][ index ] . update ( { \"tipo_de_precios\" : mer_name , \"subsector\" : sub_name , \"producto\" : prod_name } ) data_precios . append ( results [ i ][ \"values\" ][ \"resultAvanceProducto\" ][ index ]) console . rule ( \"\" , style = \"yellow\" ) console . rule ( \"FINALIZANDO NORMALIZA\u00c7\u00c3O DOS DADOS\" , style = \"yellow\" ) console . rule ( \"\" , style = \"yellow\" ) return data_precios def create_dataframe ( data_precios : list ): console . rule ( \"\" , style = \"cyan\" ) console . rule ( \"INICIANDO CRIA\u00c7\u00c3O DO DATAFRAME\" , style = \"cyan\" ) console . rule ( \"\" , style = \"cyan\" ) df = pd . DataFrame ( data_precios ) df . rename ( columns = { 'glosa' : 'Mes' , 'ano1' : '2018' , 'ano2' : '2019' , 'ano3' : '2020' , 'ano4' : '2021' , 'ano5' : '2022' , 'var1' : 'Var. % 2022-2021' , 'var2' : 'Var. % 2022' }, inplace = True ) if MES : df = df [ df [ \"Mes\" ] == MES ] console . rule ( \"\" , style = \"cyan\" ) console . rule ( \"FINALIZANDO CRIA\u00c7\u00c3O DO DATAFRAME\" , style = \"cyan\" ) console . rule ( \"\" , style = \"cyan\" ) return df def create_file ( df : pd . DataFrame , filename : str , type_file : str ): if type_file == \"excel\" : df . to_excel ( f \" { filename } .xlsx\" ) else : df . to_csv ( f \" { filename } .csv\" ) console . rule ( \"\" , style = \"magenta\" ) console . rule ( \"FINALIZANDO CRIA\u00c7\u00c3O DO ARQUIVO\" , style = \"magenta\" ) console . rule ( \"\" , style = \"magenta\" ) def main (): results = get_options () data_precios = normalize_data ( results = results ) dataframe = create_dataframe ( data_precios = data_precios ) console . rule ( \"\" , style = \"magenta\" ) console . rule ( \"INICIANDO CRIA\u00c7\u00c3O DO ARQUIVO\" , style = \"magenta\" ) console . rule ( \"\" , style = \"magenta\" ) type_file = FILETYPE filename = FILENAME create_file ( df = dataframe , filename = filename , type_file = type_file ) console . rule ( \"\" ) console . rule ( \"FINALIZANDO PROCESSO DE BUSCA DE DADOS\" ) console . rule ( \"\" ) return dataframe dataframe = main ()","title":"C\u00f3digo"},{"location":"projetos/PesquisaDeProdutos/#resultado","text":"Print do arquivo teste","title":"Resultado"},{"location":"projetos/PesquisaDeProdutos/#repositorio","text":"Pesquisa de Produtos","title":"Reposit\u00f3rio"},{"location":"projetos/SoccerNews/","text":"Soccer News \u00b6 Um aplicativo de not\u00edcias sobre futebol Feminino Esse \u00e9 um projeto mobile desenvolvido para o sistema operacional Android Quais as funcionalidades? \u00b6 Feed com as not\u00edcias dispon\u00edveis. Conseguir ser redirecionado para a not\u00edcia completa. Marca como favoritas. Compartilhar as not\u00edcias. Ferramentas \u00b6 IDE Android Studio Firebase Linguagem \u00b6 Classes e Pacotes \u00b6 Todo o projeto esta no Soccer News . Meu reposit\u00f3rio no Github. Conex\u00e3o com API \u00b6 Criei uma API para fornecer as not\u00edcias e informa\u00e7\u00f5es. Utilizei o Retrofit para buscar os dados. Interface \u00b6 Feed Favoritas Tela do Feed Tela de Favoritos APK para teste \u00b6 Fa\u00e7a parte do meu grupo de testadores e apoiadores no Firebase clicando AQUI , assim te envio a APK para poder instalar e testar em seu smartphone","title":"Soccer News"},{"location":"projetos/SoccerNews/#soccer-news","text":"Um aplicativo de not\u00edcias sobre futebol Feminino Esse \u00e9 um projeto mobile desenvolvido para o sistema operacional Android","title":"Soccer News"},{"location":"projetos/SoccerNews/#quais-as-funcionalidades","text":"Feed com as not\u00edcias dispon\u00edveis. Conseguir ser redirecionado para a not\u00edcia completa. Marca como favoritas. Compartilhar as not\u00edcias.","title":"Quais as funcionalidades?"},{"location":"projetos/SoccerNews/#ferramentas","text":"IDE Android Studio Firebase","title":"Ferramentas"},{"location":"projetos/SoccerNews/#linguagem","text":"","title":"Linguagem"},{"location":"projetos/SoccerNews/#classes-e-pacotes","text":"Todo o projeto esta no Soccer News . Meu reposit\u00f3rio no Github.","title":"Classes e Pacotes"},{"location":"projetos/SoccerNews/#conexao-com-api","text":"Criei uma API para fornecer as not\u00edcias e informa\u00e7\u00f5es. Utilizei o Retrofit para buscar os dados.","title":"Conex\u00e3o com API"},{"location":"projetos/SoccerNews/#interface","text":"Feed Favoritas Tela do Feed Tela de Favoritos","title":"Interface"},{"location":"projetos/SoccerNews/#apk-para-teste","text":"Fa\u00e7a parte do meu grupo de testadores e apoiadores no Firebase clicando AQUI , assim te envio a APK para poder instalar e testar em seu smartphone","title":"APK para teste"}]}